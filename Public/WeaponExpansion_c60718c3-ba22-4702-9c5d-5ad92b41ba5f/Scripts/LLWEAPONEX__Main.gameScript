#INCLUDE LLWEAPONEX_Effects
#INCLUDE LLWEAPONEX_Items
#INCLUDE LLWEAPONEX_Katanas
#INCLUDE LLWEAPONEX_Runeblades
#INCLUDE LLWEAPONEX_Statuses
#INCLUDE LLWEAPONEX_ThrowingWeapons
#INCLUDE LLWEAPONEX_Demolition
#INCLUDE LLWEAPONEX_Skills

INIT
	USING LLWEAPONEX_Effects
	USING LLWEAPONEX_Items
	USING LLWEAPONEX_Katanas
	USING LLWEAPONEX_Runeblades
	USING LLWEAPONEX_Statuses
	USING LLWEAPONEX_ThrowingWeapons
	USING LLWEAPONEX_Demolition
	USING LLWEAPONEX_Skills
EVENTS

EVENT LLWEAPONEX_Debug_ItemIterator
ON
	OnItemEvent(_, "LLWEAPONEX_Debug_StartItemIterator")
ACTIONS
	IterateItems("LLWEAPONEX_Iterator_Debug_CheckItem")
	
EVENT LLWEAPONEX_Debug_ItemIterator_OnInit
VARS
	ITEM:_Item
ON
	OnIterateItem(_Item, "LLWEAPONEX_Iterator_Debug_CheckItem")
ACTIONS
	ItemEvent(_Item, "LLWEAPONEX_Debug_Iterator_CheckTemplate")

EVENT LLWEAPONEX_Debug_SurfaceTest
VARS
	CHARACTER:_Char
	SURFACE:_Surface
	INT:_SurfaceInt
	STRING:_Str
	FLOAT3:_Pos
	FLOAT:_z
	FLOAT:_zMult
ON
	OnCharacterEvent(_Char, "LLWEAPONEX_Debug_SurfaceIndexTest")
ACTIONS
IF "c1"
	GetVar(_Surface, _Char, "LLWEAPONEX_Debug_SurfaceInt")
THEN
	Print(_Str, "[LLWEAPONEX:Debug:SurfaceInt] -- [1]", _Surface)
	SetVar(_Char, "LeaderLog_Type", STRING:"Debug")
	SetVar(_Char, "LeaderLog_Message", _Str)
	CharacterEvent(_Char, "LeaderLog_Commands_Log")
	GetPosition(_Char, _Pos)
	IF "c1&c2"
		GetZ(_Pos, _z)
		GetVar(_SurfaceInt, _Char, "LLWEAPONEX_Debug_SurfaceInt")
	THEN
		Cast(_zMult, _SurfaceInt)
		Add(_zMult, 1.5)
		Multiply(_zMult, 1.2)
		Add(_z, _zMult)
		SetZ(_Pos, _z)
		CreateSurfaceAt(_Pos, _Surface, 1.0, 20, _Char)
	ENDIF
	CharacterEvent(_Char, "LLWEAPONEX_Debug_SurfaceIndexTest_Next")
ENDIF
	

EVENT LLWEAPONEX_Debug_StatusTest1
VARS
	CHARACTER:_Char
	LIST<STATUS>:_RemoveList
ON
	FetchCharacterApplyStatusData(_Char, LLWEAPONEX_TEST)
ACTIONS
	SetVar(_Char, "LeaderLog_Type", STRING:"Debug")
	SetVar(_Char, "LeaderLog_Message", STRING:"[LLWEAPONEX:Debug:StatusEventOrder(gameScript)] [FetchCharacterApplyStatusData] fired for (LLWEAPONEX_TEST).")
	CharacterEvent(_Char, "LeaderLog_Commands_Log")
	RETURN(_RemoveList, LLWEAPONEX_TEST, null)

EVENT LLWEAPONEX_Debug_StatusTest2
VARS
	CHARACTER:_Char
ON
	OnCharacterStatusAttempt(_Char, LLWEAPONEX_TEST)
ACTIONS
	SetVar(_Char, "LeaderLog_Type", STRING:"Debug")
	SetVar(_Char, "LeaderLog_Message", STRING:"[LLWEAPONEX:Debug:StatusEventOrder(gameScript)] [OnCharacterStatusAttempt] fired for (LLWEAPONEX_TEST).")
	CharacterEvent(_Char, "LeaderLog_Commands_Log")

EVENT LLWEAPONEX_Debug_StatusTest3
VARS
	CHARACTER:_Char
	STRING:_Str
ON
	OnCharacterStatusApplied(_Char, LLWEAPONEX_TEST)
ACTIONS
	SetVar(_Char, "LeaderLog_Type", STRING:"Debug")
	SetVar(_Char, "LeaderLog_Message", STRING:"[LLWEAPONEX:Debug:StatusEventOrder(gameScript)] [OnCharacterStatusApplied] fired for (LLWEAPONEX_TEST).")
	CharacterEvent(_Char, "LeaderLog_Commands_Log")

EVENT LLWEAPONEX_Debug_StatusTest4
VARS
	CHARACTER:_Char
	STRING:_Str
ON
	OnCharacterStatusRemoved(_Char, LLWEAPONEX_TEST)
ACTIONS
	SetVar(_Char, "LeaderLog_Type", STRING:"Debug")
	SetVar(_Char, "LeaderLog_Message", STRING:"[LLWEAPONEX:Debug:StatusEventOrder(gameScript)] [OnCharacterStatusRemoved] fired for (LLWEAPONEX_TEST).")
	CharacterEvent(_Char, "LeaderLog_Commands_Log")

EVENT LLWEAPONEX_Debug_ApplyStatusTest
VARS
	CHARACTER:_Char1
	CHARACTER:_Char2
	CHARACTER:_Target
ON
	OnCharacterCharacterEvent(_Char1, _Char2, "LLWEAPONEX_Debug_ApplyStatus")
ACTIONS
IF "c1"
	GetVar(_Target, _Char1, "LLWEAPONEX_Debug_StatusTarget")
THEN
	CharacterApplyStatus(_Target, KNOCKED_DOWN, 1, 1, _Char1)
ENDIF
	CharacterApplyStatus(_Char2, KNOCKED_DOWN, 1, 1, _Char1)

EVENT LLWEAPONEX_ItemHasSkill
VARS
	CHARACTER:_Character
	ITEM:_Item
	SKILL:_Skill
	STRING:_SkillStr
ON
	OnCharacterItemEvent(_Character, _Item, "LLWEAPONEX_ItemCheck_FindSkill")
ACTIONS
IF "c1&!c2"
	ItemGetSkillId(_Item, _Skill)
	IsEqual(_Skill, null)
THEN
	Print(_SkillStr, "[1]", _Skill)
	SetVar(_Item, "LLWEAPONEX_ItemSkill", _SkillStr)
	CharacterItemEvent(_Character, _Item, "LLWEAPONEX_ItemCheck_HasSkill")
ELSE
	CharacterItemEvent(_Character, _Item, "LLWEAPONEX_ItemCheck_NoSkill")
ENDIF

EVENT LLWEAPONEX_CheckWeaponTypes
VARS
	CHARACTER:_Char
	INT:_FoundType
ON
	OnCharacterEvent(_Char, "LLWEAPONEX_CheckWeaponType")
ACTIONS
	Set(_FoundType, 0)
IF "c1"
	CharacterHasWeaponType(_Char, Axe, 1)
THEN
	CharacterEvent(_Char, "LLWEAPONEX_WeaponTypeFound_Axe")
	Set(_FoundType, 1)
ENDIF
IF "c1"
	CharacterHasWeaponType(_Char, Bow, 1)
THEN
	CharacterEvent(_Char, "LLWEAPONEX_WeaponTypeFound_Bow")
	Set(_FoundType, 1)
ENDIF
IF "c1"
	CharacterHasWeaponType(_Char, Club, 1)
THEN
	CharacterEvent(_Char, "LLWEAPONEX_WeaponTypeFound_Club")
	Set(_FoundType, 1)
ENDIF
IF "c1"
	CharacterHasWeaponType(_Char, Crossbow, 1)
THEN
	CharacterEvent(_Char, "LLWEAPONEX_WeaponTypeFound_Crossbow")
	Set(_FoundType, 1)
ENDIF
IF "c1"
	CharacterHasWeaponType(_Char, Knife, 1)
THEN
	CharacterEvent(_Char, "LLWEAPONEX_WeaponTypeFound_Knife")
	Set(_FoundType, 1)
ENDIF
IF "c1"
	CharacterHasWeaponType(_Char, Spear, 1)
THEN
	CharacterEvent(_Char, "LLWEAPONEX_WeaponTypeFound_Spear")
	Set(_FoundType, 1)
ENDIF
IF "c1"
	CharacterHasWeaponType(_Char, Staff, 1)
THEN
	CharacterEvent(_Char, "LLWEAPONEX_WeaponTypeFound_Staff")
	Set(_FoundType, 1)
ENDIF
IF "c1"
	CharacterHasWeaponType(_Char, Sword, 1)
THEN
	CharacterEvent(_Char, "LLWEAPONEX_WeaponTypeFound_Sword")
	Set(_FoundType, 1)
ENDIF
IF "c1"
	CharacterHasWeaponType(_Char, Wand, 1)
THEN
	CharacterEvent(_Char, "LLWEAPONEX_WeaponTypeFound_Wand")
	Set(_FoundType, 1)
ENDIF
IF "c1"
	CharacterHasWeaponType(_Char, Arrow, 1) // ??
THEN
	CharacterEvent(_Char, "LLWEAPONEX_WeaponTypeFound_Arrow")
	Set(_FoundType, 1)
ENDIF
IF "c1"
	CharacterHasWeaponType(_Char, Sentinel, 1) // Wtf is this?
THEN
	CharacterEvent(_Char, "LLWEAPONEX_WeaponTypeFound_Sentinel")
	Set(_FoundType, 1)
ENDIF
IF "c1"
	IsEqual(_FoundType, 0)
THEN
	CharacterEvent(_Char, "LLWEAPONEX_WeaponTypeFound_Unarmed")
ENDIF
	CharacterEvent(_Char, "LLWEAPONEX_CheckWeaponType_Done")