Version 1
SubGoalCombiner SGC_AND
INITSECTION
LLWEAPONEX_Statuses_InitSettings();
KBSECTION
//REGION SETTINGS
PROC
LLWEAPONEX_Statuses_InitSettings()
THEN
DB_LLWEAPONEX_Statuses_TormentDebuff(0, 40, "LLWEAPONEX_CORPSE_EXPLOSION_EXPLODE", 0.0);
DB_LLWEAPONEX_Statuses_TormentDebuff(41, 100, "LLWEAPONEX_MAGIC_CRIPPLED_CHECK", 6.0);
DB_LLWEAPONEX_Statuses_TormentDebuff(101, 166, "CURSED", 6.0);
DB_LLWEAPONEX_Statuses_TormentDebuff(167, 201, "ENTANGLED", 6.0);
DB_LLWEAPONEX_Statuses_TormentDebuff(202, 239, "DISEASED", 6.0);
DB_LLWEAPONEX_Statuses_TormentDebuff(240, 320, "SLOWED", 6.0);
DB_LLWEAPONEX_Statuses_TormentDebuff(321, 341, "WEAK", 6.0);
DB_LLWEAPONEX_Statuses_TormentDebuff(342, 468, "LLWEAPONEX_RUPTURE", 0.0);
DB_LLWEAPONEX_Statuses_TormentDebuff(469, 697, "LLWEAPONEX_SOUL_BURN_PROC", 0.0);
DB_LLWEAPONEX_Statuses_TormentDebuff(698, 899, "LLWEAPONEX_MAGIC_BLEEDING_CHECK", 6.0);
DB_LLWEAPONEX_Statuses_TormentDebuff(900, 999, "LLWEAPONEX_MAGIC_KNOCKDOWN_CHECK", 6.0);
//END_REGION

//REGION HELPERS
QRY
LLWEAPONEX_Statuses_QRY_ClampTurns((CHARACTERGUID)_Target, (STRING)_Status, (INTEGER)_Min)
AND
GetStatusTurns(_Target, _Status, _Turns)
AND
IntegerMax(_Min, _Turns, _Max)
THEN
DB_LLWEAPONEX_Statuses_Temp_ClampedTurns(_Target, _Status, _Max);

QRY
LLWEAPONEX_Statuses_QRY_ClampTurns((CHARACTERGUID)_Target, (STRING)_Status, (INTEGER)_Min)
AND
NOT DB_LLWEAPONEX_Statuses_Temp_ClampedTurns(_Target, _Status, _)
THEN
DB_LLWEAPONEX_Statuses_Temp_ClampedTurns(_Target, _Status, _Min);

PROC
LLWEAPONEX_Statuses_ApplyRealStatus((CHARACTERGUID)_Target, (GUIDSTRING)_Source, (STRING)_TriggerStatus, (STRING)_RealStatus)
AND
LLWEAPONEX_Statuses_QRY_ClampTurns(_Target, _TriggerStatus, 1)
AND
DB_LLWEAPONEX_Statuses_Temp_ClampedTurns(_Target, _Status, _Turns)
AND
Real(_Turns, _Duration)
THEN
NOT DB_LLWEAPONEX_Statuses_Temp_ClampedTurns(_Target, _Status, _Turns);
ApplyStatus(_Target, _RealStatus, _Duration, 1, _Source);
RemoveStatus(_Target, _TriggerStatus);
//END_REGION

//REGION LISTEN_FOR_REMOVAL
PROC
LLWEAPONEX_Statuses_ListenForRemoval((CHARACTERGUID)_Source, (GUIDSTRING)_Target, (STRING)_Status)
AND
NOT DB_LLWEAPONEX_MasteryBonus_ListenForRemoval(_, _Target, _)
THEN
LeaderLib_ToggleScripts_EnableScriptForObject(_Target, "LLWEAPONEX_ListenForStatusRemoval", "WeaponExpansion");

PROC
LLWEAPONEX_Statuses_ListenForRemoval((CHARACTERGUID)_Source, (GUIDSTRING)_Target, (STRING)_Status)
THEN
DB_LLWEAPONEX_MasteryBonus_ListenForRemoval(_Source, _Target, _Status);

PROC
LLWEAPONEX_Statuses_OnStatusRemoved((CHARACTERGUID)_Source, (GUIDSTRING)_Target, (STRING)_Status)
AND
NOT DB_LLWEAPONEX_MasteryBonus_ListenForRemoval(_, _Target, _)
THEN
LeaderLib_ToggleScripts_DisableScriptForObject(_Target, "LLWEAPONEX_ListenForStatusRemoval", "WeaponExpansion");
//END_REGION

//REGION LISTEN_FOR_TURN_ENDING
PROC
LLWEAPONEX_Statuses_ListenForTurnEnding((CHARACTERGUID)_Source, (GUIDSTRING)_Target, (STRING)_Status, (STRING)_Group)
THEN
DB_LLWEAPONEX_Statuses_ListenForTurnEnding(_Source, _Target, _Status, _Group);
LeaderLib_ToggleScripts_EnableScriptForObject(_Source, "LLWEAPONEX_ListenForTurnEnding", "WeaponExpansion");

PROC
LLWEAPONEX_Statuses_TurnEnded_OnStatusRemoved((CHARACTERGUID)_Source, (GUIDSTRING)_Target, (STRING)_Status, (STRING)_Group)
THEN
DB_NOOP(1);
//END_REGION

//REGION TARRED_BURNING_BYPASS
IF
CharacterStatusAttempt(_Character, "BURNING", _Source)
AND
HasActiveStatus(_Character, "LLWEAPONEX_TARRED", 1)
AND
HasActiveStatus(_Character, "BURNING", 0)
AND
NOT DB_LLWEAPONEX_Statuses_Temp_BurningBypassedArmor(_Character)
AND
GetStatusTurns(_Character, "BURNING", _Turns)
AND
Real(_Turns, _TurnsR)
AND
RealProduct(_TurnsR, 6.0, _Duration)
THEN
ApplyStatus(_Character, "BURNING", _Duration, 1, _Source);
DB_LLWEAPONEX_Statuses_Temp_BurningBypassedArmor(_Character);

IF
CharacterStatusAttempt(_Character, "BURNING", _Source)
AND
HasActiveStatus(_Character, "LLWEAPONEX_TARRED", 1)
AND
HasActiveStatus(_Character, "BURNING", 0)
AND
NOT DB_LLWEAPONEX_Statuses_Temp_BurningBypassedArmor(_Character)
AND
NOT GetStatusTurns(_Character, "BURNING", _)
THEN
ApplyStatus(_Character, "BURNING", 12.0, 1, _Source);
DB_LLWEAPONEX_Statuses_Temp_BurningBypassedArmor(_Character);

IF
CharacterStatusApplied(_Character, "BURNING", _Source)
AND
DB_LLWEAPONEX_Statuses_Temp_BurningBypassedArmor(_Character)
THEN
NOT DB_LLWEAPONEX_Statuses_Temp_BurningBypassedArmor(_Character);
//END_REGION

//REGION CHAOS_SURFACE_STATUSES
IF
CharacterStatusAttempt(_Character, "LLWEAPONEX_RANDOM_SURFACE_SMALL", _)
AND
GetStatusTurns(_Character, "LLWEAPONEX_RANDOM_SURFACE_SMALL", _Turns)
AND
_Turns > 0
AND
GetPosition(_Character, _x, _y, _z)
AND
Real(_Turns, _TurnsR)
AND
RealProduct(_TurnsR, 6.0, _Lifetime)
AND
LeaderLib_Array_QRY_Random("LLWEAPONEX_ChaosSurfaces")
AND
DB_LeaderLib_Array_Temp_RandomResult("LLWEAPONEX_ChaosSurfaces", _Index, _Surface)
THEN
NOT DB_LeaderLib_Array_Temp_RandomResult("LLWEAPONEX_ChaosSurfaces", _Index, _Surface);
CreateSurfaceAtPosition(_x, _y, _z, _Surface, 1.0, _Lifetime);
RemoveStatus(_Character, "LLWEAPONEX_RANDOM_SURFACE_SMALL");

IF
CharacterStatusAttempt(_Character, "LLWEAPONEX_RANDOM_SURFACE_SMALL", _)
AND
NOT GetStatusTurns(_Character, "LLWEAPONEX_RANDOM_SURFACE_SMALL", _)
AND
GetPosition(_Character, _x, _y, _z)
AND
LeaderLib_Array_QRY_Random("LLWEAPONEX_ChaosSurfaces")
AND
DB_LeaderLib_Array_Temp_RandomResult("LLWEAPONEX_ChaosSurfaces", _Index, _Surface)
THEN
NOT DB_LeaderLib_Array_Temp_RandomResult("LLWEAPONEX_ChaosSurfaces", _Index, _Surface);
CreateSurfaceAtPosition(_x, _y, _z, _Surface, 1.0, 12.0);
RemoveStatus(_Character, "LLWEAPONEX_RANDOM_SURFACE_SMALL");
//END_REGION

//REGION DEATH_SENTENCE
IF
CharacterStatusApplied(_Enemy, "LLWEAPONEX_DEATH_SENTENCE", (CHARACTERGUID)_Source)
THEN
DB_LLWEAPONEX_Statuses_Temp_DeathSentence(_Enemy, _Source);

IF
CharacterStatusRemoved(_Enemy, "LLWEAPONEX_DEATH_SENTENCE", _)
AND
CharacterIsDead(_Enemy, 0)
AND
DB_LLWEAPONEX_Statuses_Temp_DeathSentence(_Enemy, _Source)
THEN
NOT DB_LLWEAPONEX_Statuses_Temp_DeathSentence(_Enemy, _Source);

IF
CharacterDying(_Enemy)
AND
DB_LLWEAPONEX_Statuses_Temp_DeathSentence(_Enemy, _Source)
AND
GetPosition(_Enemy, _x, _y, _z)
THEN
PlayEffectAtPosition("RS3_FX_GP_ScriptedEvent_SourceJar_Death_Impact_01", _x, _y, _z);
PlayEffectAtPosition("RS3_FX_GP_Impacts_Ghost_01", _x, _y, _z);

IF
CharacterDied(_Enemy)
AND
DB_LLWEAPONEX_Statuses_Temp_DeathSentence(_Enemy, _Source)
THEN
LLWEAPONEX_Statuses_CreateRevenant(_Enemy, _Source, "LLWEAPONEX_Revenant_Base_bb15f97e-b6bf-4648-9190-71b42a7744c4", " (Revenant)", "LLWEAPONEX_REVENANT", 12.0, 1);
NOT DB_LLWEAPONEX_Statuses_Temp_DeathSentence(_Enemy, _Source);

IF
CharacterStatusRemoved(_Character, "LLWEAPONEX_DEATH_SENTENCE", _)
AND
CharacterIsDead(_Character, 0)
AND
DB_LLWEAPONEX_Statuses_Temp_Revenants(_Character, _Revenant, _Source, "LLWEAPONEX_REVENANT")
THEN
LLWEAPONEX_Statuses_KillRevenant(_Revenant);
//END_REGION

//REGION REVENANTS_CREATE
PROC
LLWEAPONEX_Statuses_CreateRevenant((CHARACTERGUID)_Target, (CHARACTERGUID)_Source, (STRING)_Template, (STRING)_NameSuffix, (STRING)_Status, (REAL)_Duration, (INTEGER)_CopyEquipment)
AND
GetPosition(_Target, _x, _y, _z)
AND
TemporaryCharacterCreateAtPosition(_x, _y, _z, _Template, 0, _Revenant)
THEN
LLWEAPONEX_Statuses_Internal_SetupRevenant(_Revenant, _Target, _Source, _NameSuffix, _Status, _Duration, _CopyEquipment);

PROC
LLWEAPONEX_Statuses_CreateRevenantSummon((CHARACTERGUID)_Target, (CHARACTERGUID)_Source, (STRING)_NameSuffix, (STRING)_Status, (REAL)_Duration, (INTEGER)_CopyEquipment)
THEN
DB_LLWEAPONEX_Statuses_Temp_SetupRevenantSummon(_Target, _Source, _NameSuffix, _Status, _Duration, _CopyEquipment);
ApplyStatus(_Target, "LLWEAPONEX_SUMMON_REVENANT_EXPLODE", 0.0, 1, _Target);

IF
CharacterStatusApplied(_Revenant, "SUMMONING", (CHARACTERGUID)_Target)
AND
DB_LLWEAPONEX_Statuses_Temp_SetupRevenantSummon(_Target, _Source, _NameSuffix, _Status, _Duration, _CopyEquipment)
THEN
NOT DB_LLWEAPONEX_Statuses_Temp_SetupRevenantSummon(_Target, _Source, _NameSuffix, _Status, _Duration, _CopyEquipment);
LLWEAPONEX_Statuses_Internal_SetupRevenant(_Revenant, _Target, _Source, _NameSuffix, _Status, _Duration, _CopyEquipment);

PROC
LLWEAPONEX_Statuses_Internal_SetupRevenant((CHARACTERGUID)_Revenant, (CHARACTERGUID)_Target, (CHARACTERGUID)_Source, (STRING)_NameSuffix, (STRING)_Status, (REAL)_Duration, (INTEGER)_CopyEquipment)
AND
CharacterGetLevel(_Target, _Level)
AND
CharacterGetDisplayName(_Target, _, _Name)
AND
StringConcatenate(_Name, _NameSuffix, _RevenantName)
THEN
DB_LLWEAPONEX_Statuses_Temp_Revenants(_Target, _Revenant, _Source, _Status);
SetOnStage(_Revenant, 0);
CharacterSetDetached(_Revenant, 1);
CharacterTransformAppearanceTo(_Revenant, _Target, 0, 1);

//CharacterCloneSkillsTo(_Target, _Revenant, 0);
CharacterLevelUpTo(_Revenant, _Level);

SetCanJoinCombat(_Revenant, 0);
SetCanFight(_Revenant, 0);
SetFaction(_Revenant, "Good NPC");
SetRelationIndivFactionToPlayers(_Revenant, 100);

CharacterSetHitpointsPercentage(_Revenant, 100.0);
DB_LLWEAPONEX_Statuses_Temp_WaitForFinished(_Revenant, _Target, _Source, _Status, _RevenantName, _Duration, _CopyEquipment);

LeaderLib_Helper_SafeTeleport(_Revenant, _Target, "LLWEAPONEX_Events_Revenant_SetAttached", 8.0);

IF
StoryEvent((CHARACTERGUID)_Revenant, "LLWEAPONEX_Events_Revenant_SetAttached")
AND
DB_LLWEAPONEX_Statuses_Temp_WaitForFinished(_Revenant, (CHARACTERGUID)_Target, _Source, _Status, _RevenantName, _Duration, _CopyEquipment)
THEN
CharacterSetCustomName(_Revenant, _RevenantName);
LeaderLib_Helper_CopyAbilities(_Revenant, _Target);
LeaderLib_Helper_CopyAttributes(_Revenant, _Target);
CharacterCloneSkillsTo(_Target, _Revenant, 1);

IF
StoryEvent((CHARACTERGUID)_Revenant, "LLWEAPONEX_Events_Revenant_SetAttached")
AND
DB_LLWEAPONEX_Statuses_Temp_WaitForFinished(_Revenant, (CHARACTERGUID)_Target, _Source, _Status, _RevenantName, _Duration, 1)
THEN
LeaderLib_Timers_StartCharacterCharacterTimer(_Revenant, _Target, 50, "LLWEAPONEX_Timers_Revenant_CopyEquipment", "LLWEAPONEX_Revenant_CopyEquipment");

IF
CharacterCharacterEvent(_Revenant, _Target, "LLWEAPONEX_Revenant_CopyEquipment")
THEN
LeaderLib_Helper_CopyEquipment(_Revenant, _Target);

IF
StoryEvent((CHARACTERGUID)_Revenant, "LLWEAPONEX_Events_Revenant_SetAttached")
THEN
CharacterSetDetached(_Revenant, 0);
PlayEffect(_Revenant, "RS3_FX_Char_Ghosts_Teleport_in_01", "");
LeaderLib_Timers_StartObjectTimer(_Revenant, 250, "LLWEAPONEX_Timers_RevenantReadyTimer", "LLWEAPONEX_Events_RevenantReady");

IF
StoryEvent((CHARACTERGUID)_Revenant, "LLWEAPONEX_Events_RevenantReady")
AND
DB_LLWEAPONEX_Statuses_Temp_WaitForFinished(_Revenant, _Target, _Source, _Status, _RevenantName, _Duration, _CopyEquipment)
THEN
NOT DB_LLWEAPONEX_Statuses_Temp_WaitForFinished(_Revenant, _Target, _Source, _Status, _RevenantName, _Duration, _CopyEquipment);
ApplyStatus(_Revenant, _Status, _Duration, 1, _Source);
LLWEAPONEX_Statuses_OnRevenantCreated(_Revenant, _Target, _Source, _Status);

IF
StoryEvent((CHARACTERGUID)_Revenant, "LLWEAPONEX_Events_RevenantReady")
THEN
SetCanJoinCombat(_Revenant, 1);
SetCanFight(_Revenant, 1);
SetOnStage(_Revenant, 1);

PROC
LLWEAPONEX_Statuses_OnRevenantCreated((CHARACTERGUID)_Revenant, (CHARACTERGUID)_Target, (CHARACTERGUID)_Source, "LLWEAPONEX_REVENANT")
AND
CharacterIsInCombat(_Revenant, 0)
AND
CharacterIsInCombat(_Source, 1)
THEN
EnterCombat(_Revenant, _Source);

PROC
LLWEAPONEX_Statuses_OnRevenantCreated((CHARACTERGUID)_Revenant, (CHARACTERGUID)_Target, (CHARACTERGUID)_Source, "LLWEAPONEX_REVENANT")
AND
CharacterIsInCombat(_Revenant, 0)
AND
GetClosestAlivePlayer(_Revenant, _Player, _Dist)
AND
CharacterIsInCombat(_Player, 0)
THEN
ProcCharacterFollowCharacter(_Revenant, _Player);

/*
IF
StoryEvent((CHARACTERGUID)_Revenant, "LLWEAPONEX_Events_RevenantReady")
AND
CharacterGetHostCharacter(_Host)
THEN
//CharacterMakePlayer(_Revenant, _Host);
TeleportTo(_Revenant, _Host, "", 0, 1, 1);
*/

IF
CharacterStatusApplied(_Character, "RESURRECT", _)
AND
DB_LLWEAPONEX_Statuses_Temp_Revenants(_Character, _Revenant, _Source, _Status)
THEN
LLWEAPONEX_Statuses_KillRevenant(_Revenant);

IF
CharacterStatusRemoved(_Revenant, _Status, _)
AND
DB_LLWEAPONEX_Statuses_Temp_Revenants(_Enemy, _Revenant, _Source, _Status)
THEN
LLWEAPONEX_Statuses_KillRevenant(_Revenant);

PROC
LLWEAPONEX_Statuses_KillRevenant((CHARACTERGUID)_Revenant)
AND
GetPosition(_Revenant, _x, _y, _z)
THEN
SetOnStage(_Revenant, 0);
PlayEffectAtPosition("RS3_FX_GP_ScriptedEvent_GhostDissipate_01", _x, _y, _z);
CharacterDieImmediate(_Revenant, 0, "LifeTime", _Revenant);

IF
CharacterDied(_Revenant)
AND
DB_LLWEAPONEX_Statuses_Temp_Revenants(_Target, _Revenant, _Source, _Status)
THEN
LLWEAPONEX_Statuses_OnRevenantDied(_Revenant, _Target, _Source, _Status);

PROC
LLWEAPONEX_Statuses_OnRevenantDied((CHARACTERGUID)_Revenant, (CHARACTERGUID)_Target, (CHARACTERGUID)_Source, "LLWEAPONEX_REVENANT")
AND
GetPosition(_Revenant, _x, _y, _z)
THEN
TransformSurfaceAtPosition(_x, _y, _z, "Vaporize", "Ground", 1.0, 12.0, _Source);
LLWEAPONEX_Statuses_RemoveRevenant(_Revenant);

PROC
LLWEAPONEX_Statuses_RemoveRevenant((CHARACTERGUID)_Revenant)
AND
DB_LLWEAPONEX_Statuses_Temp_Revenants(_Enemy, _Revenant, _Source, _Status)
THEN
NOT DB_LLWEAPONEX_Statuses_Temp_Revenants(_Enemy, _Revenant, _Source, _Status);
RemoveTemporaryCharacter(_Revenant);
//END_REGION

//REGION REVENANTS_TORMENT
PROC
LLWEAPONEX_Statuses_OnRevenantCreated((CHARACTERGUID)_Revenant, (CHARACTERGUID)_Target, (CHARACTERGUID)_Source, "LLWEAPONEX_TORMENTED_GHOST")
//AND
//DB_IsPlayer(_Target)
THEN
DB_LLWEAPONEX_Skills_Temp_AttachedRevanents(_Revenant, _Target);
CharacterAddToPlayerCharacter(_Revenant, _Target);
LeaderLib_Helper_CopyEquipment(_Revenant, _Target);

PROC
LLWEAPONEX_Statuses_OnRevenantDied((CHARACTERGUID)_Revenant, (CHARACTERGUID)_Target, (CHARACTERGUID)_Source, "LLWEAPONEX_TORMENTED_GHOST")
THEN
LLWEAPONEX_Statuses_RemoveRevenant(_Revenant);

PROC
LLWEAPONEX_Statuses_RemoveRevenant((CHARACTERGUID)_Revenant)
AND
DB_LLWEAPONEX_Skills_Temp_AttachedRevanents(_Revenant, _Target)
THEN
NOT DB_LLWEAPONEX_Skills_Temp_AttachedRevanents(_Revenant, _Target);
//END_REGION

//REGION REVENANTS_SAVE_WORKAROUND
/* Revenant Save Bug 2/4/2019
When a save with an attached revenant is loaded, that revenant no longer remains attached, despite still being a "player".
Not sure why this is happeneing, but unattaching them and re-attaching after the game is started works.
*/

//Old saves
IF
SavegameLoading(_,_,_,_)
AND
DB_LLWEAPONEX_Statuses_Temp_Revenants(_Target, _Revenant, _Source, "LLWEAPONEX_TORMENTED_GHOST")
AND
NOT DB_LLWEAPONEX_Skills_Temp_AttachedRevanents(_Revenant, _Target)
THEN
DB_LLWEAPONEX_Skills_Temp_AttachedRevanents(_Revenant, _Target);

IF
SavegameLoading(_,_,_,_)
AND
DB_LLWEAPONEX_Skills_Temp_AttachedRevanents(_Revenant, _Target)
THEN
DB_LLWEAPONEX_Statuses_Temp_ReattachRevenant(_Revenant, _Target);
CharacterRemoveFromPlayerCharacter(_Revenant, _Target);

IF
GameStarted(_,_)
AND
DB_LLWEAPONEX_Statuses_Temp_ReattachRevenant(_Revenant, _Target)
THEN
NOT DB_LLWEAPONEX_Statuses_Temp_ReattachRevenant(_Revenant, _Target);
CharacterAddToPlayerCharacter(_Revenant, _Target);
//END_REGION

//REGION BEAMS
IF
CharacterStatusApplied(_Character, "LLWEAPONEX_RUNEBLADE_CONTAMINATION_CHECK", (CHARACTERGUID)_AuraCharacter)
THEN
PlayBeamEffect(_AuraCharacter, _Character, "RS3_FX_GP_Beams_AcidBeam_01", "Dummy_BodyFX", "Dummy_BodyFX");

/*
IF
CharacterStatusApplied(_Character, "LLWEAPONEX_RUNEBLADE_CONTAMINATION_CHECK", (CHARACTERGUID)_AuraCharacter)
THEN
DB_LLWEAPONEX_Statuses_Temp_AuraBeamEffects(_Character, _AuraCharacter, "POISONED", "RS3_FX_GP_Beams_AcidBeam_01");

IF
CharacterStatusApplied(_Character, _Status, _)
AND
DB_LLWEAPONEX_Statuses_Temp_AuraBeamEffects(_Character, _AuraCharacter, _Status, _BeamEffect)
THEN
PlayBeamEffect(_AuraCharacter, _Target, _BeamEffect, "Dummy_BodyFX", "Dummy_BodyFX");
NOT DB_LLWEAPONEX_Statuses_Temp_AuraBeamEffects(_Character, _AuraCharacter, _Status, _BeamEffect);
*/
//END_REGION

//REGION RUNEBLADE_SHOCKED
IF
CharacterStatusApplied(_Character, "LLWEAPONEX_SHOCKED_RESISTANCE_RUNEBLADE_CHECK", _)
THEN
ProcObjectTimer(_Character, "LLWEAPONEX_Timers_ShockedResistanceCheck", 250);

PROC
ProcObjectTimerFinished((CHARACTERGUID)_Character, "LLWEAPONEX_Timers_ShockedResistanceCheck")
AND
NOT LeaderLib_Helper_QRY_HasStatus(_Character, "LLWEAPONEX_SHOCKED_RESISTANCE_RUNEBLADE")
AND
LeaderLib_Helper_QRY_HasStatus(_Character, "STUNNED")
AND
GetStatusTurns(_Character, "LLWEAPONEX_SHOCKED_RESISTANCE_RUNEBLADE_CHECK", _Turns)
AND
Real(_Turns, _TurnsR)
AND
RealProduct(_TurnsR, 6.0, _Duration)
THEN
ApplyStatus(_Character, "LLWEAPONEX_SHOCKED_RESISTANCE_RUNEBLADE", _Duration, 0, _Character);

PROC
ProcObjectTimerFinished((CHARACTERGUID)_Character, "LLWEAPONEX_Timers_ShockedResistanceCheck")
AND
LeaderLib_Helper_QRY_HasStatus(_Character, "LLWEAPONEX_SHOCKED_RESISTANCE_RUNEBLADE_CHECK")
THEN
RemoveStatus(_Character, "LLWEAPONEX_SHOCKED_RESISTANCE_RUNEBLADE_CHECK");
//END_REGION

//REGION TORMENT
IF
CharacterStatusApplied(_Target, "LLWEAPONEX_TORMENT", (CHARACTERGUID)_Caster)
AND
LeaderLib_Random_QRY(999)
AND
DB_LeaderLib_Random(_Roll)
AND
_Roll > 0
AND
DB_LLWEAPONEX_Statuses_TormentDebuff(_MinRoll, _MaxRoll, _Status, _Duration)
AND
_Roll >= _MinRoll
AND
_Roll <= _MaxRoll
THEN
ApplyStatus(_Target, _Status, _Duration, 0, _Caster);

/*
IF
CharacterStatusApplied(_Target, "LLWEAPONEX_TORMENT", (CHARACTERGUID)_Caster)
THEN
CharacterStatusText(_Target, "LLWEAPONEX_Status_Torment_Applied");
*/

//END_REGION

//REGION FUMBLE
IF
CharacterStatusRemoved(_Target, "LLWEAPONEX_CONCUSSION", _)
AND
DB_LLWEAPONEX_Statuses_Temp_Concussion(_Target, _Source)
THEN
NOT DB_LLWEAPONEX_Statuses_Temp_Concussion(_Target, _Source);

IF
CharacterStatusApplied(_Target, "LLWEAPONEX_CONCUSSION", _Source)
THEN
DB_LLWEAPONEX_Statuses_Temp_Concussion(_Target, _Source);

IF
CharacterStartAttackObject(_,_,_Target)
AND
DB_LLWEAPONEX_Statuses_Temp_Concussion(_Target, _Source)
AND
LeaderLib_Roll_QRY(100,999)
THEN
ApplyStatus(_Target, "LLWEAPONEX_FUMBLE", 0.0, 1, _Source);

IF
CharacterStatusApplied(_Target, "LLWEAPONEX_FUMBLE", _Source)
THEN
LeaderLib_Helper_ClearActionQueue(_Target, 1);
PlayAnimation(_Target, "hit", "");
//END_REGION

//REGION BYPASS_ARMOR_STATUSES
IF
CharacterStatusApplied(_Target, "LLWEAPONEX_DRAGONS_BANE", _Source)
AND
HasActiveStatus(_Target, "KNOCKED_DOWN", 0)
THEN
ApplyStatus(_Target, "KNOCKED_DOWN", 6.0, 1, _Source);

IF
CharacterStatusApplied(_Target, "LLWEAPONEX_MAGIC_KNOCKDOWN_CHECK", _Source)
THEN
LLWEAPONEX_Statuses_ApplyRealStatus(_Target, _Source, "LLWEAPONEX_MAGIC_KNOCKDOWN_CHECK", "KNOCKED_DOWN");

IF
CharacterStatusApplied(_Target, "LLWEAPONEX_MAGIC_BLEEDING_CHECK", _Source)
THEN
LLWEAPONEX_Statuses_ApplyRealStatus(_Target, _Source, "LLWEAPONEX_MAGIC_BLEEDING_CHECK", "BLEEDING");

IF
CharacterStatusApplied(_Target, "LLWEAPONEX_MAGIC_CRIPPLED_CHECK", _Source)
THEN
LLWEAPONEX_Statuses_ApplyRealStatus(_Target, _Source, "LLWEAPONEX_MAGIC_CRIPPLED_CHECK", "CRIPPLED");

IF
CharacterStatusApplied(_Target, "LLWEAPONEX_MAGIC_CRIPPLED_CHECK", _Source)
THEN
LLWEAPONEX_Statuses_ApplyRealStatus(_Target, _Source, "LLWEAPONEX_MAGIC_CRIPPLED_CHECK", "CRIPPLED");

IF
CharacterStatusApplied(_Target, "LLWEAPONEX_PHYSICAL_BLIND_CHECK", _Source)
THEN
LLWEAPONEX_Statuses_ApplyRealStatus(_Target, _Source, "LLWEAPONEX_PHYSICAL_BLIND_CHECK", "BLIND");

IF
CharacterStatusApplied(_Target, "LLWEAPONEX_PHYSICAL_WEAK_CHECK", _Source)
THEN
LLWEAPONEX_Statuses_ApplyRealStatus(_Target, _Source, "LLWEAPONEX_PHYSICAL_WEAK_CHECK", "WEAK");

IF
CharacterStatusApplied(_Target, "LLWEAPONEX_PHYSICAL_SLEEPING_CHECK", _Source)
THEN
LLWEAPONEX_Statuses_ApplyRealStatus(_Target, _Source, "LLWEAPONEX_PHYSICAL_SLEEPING_CHECK", "SLEEPING");
//END_REGION

//REGION BLOCK_HEALING
IF
CharacterStatusApplied(_Char, "LLWEAPONEX_BLOCK_HEALING", _)
THEN
LeaderLib_ToggleScripts_EnableScript("LLWEAPONEX_BlockHealingActive", "WeaponExpansion");

IF
CharacterStatusRemoved(_Char, "LLWEAPONEX_BLOCK_HEALING", _)
THEN
LeaderLib_ToggleScripts_DisableScriptAfterDelay("LLWEAPONEX_BlockHealingActive", "WeaponExpansion", 500);

PROC
ProcObjectTimerFinished(_Char, "LLWEAPONEX_Timers_BlockHealing_ResetInvulnerable")
THEN
LeaderLog_Log("DEBUG", "[LLWEAPONEX_DEBUG_BLOCK_HEALING] Reset invulnerability.");
ProcSetInvulnerable(_Char, 0);

PROC
ProcObjectTimerFinished((CHARACTERGUID)_Char, "LLWEAPONEX_Timers_BlockHealing_ResetInvulnerable")
AND
DB_LLWEAPONEX_BlockingHealingStatus(_Char, _Status)
THEN
NOT DB_LLWEAPONEX_BlockingHealingStatus(_Char, _Status);

/*
IF
CharacterStatusAttempt(_Char, "LIFESTEAL", _)
THEN
DB_LLWEAPONEX_BlockingHealing_Temp_AllowingStatus(_Char, "LIFESTEAL");

IF
CharacterStatusRemoved(_Char, "HEAL", _)
AND
DB_LLWEAPONEX_BlockingHealing_Temp_AllowingStatus(_Char, _Status)
THEN
NOT DB_LLWEAPONEX_BlockingHealing_Temp_AllowingStatus(_Char, _Status);

QRY
LLWEAPONEX_BlockHealing_QRY_BlockStatus((CHARACTERGUID)_Char, "HEAL")
AND
NOT DB_LLWEAPONEX_BlockingHealing_Temp_AllowingStatus(_Char, _)
THEN
DB_NOOP(1);

QRY
LLWEAPONEX_BlockHealing_QRY_BlockStatus((CHARACTERGUID)_Char, (STRING)_Status)
AND
NOT DB_LLWEAPONEX_BlockingHealing_Temp_AllowingStatus(_Char, _Status)
AND
QRY_IsHealingStatus(_Status)
THEN
DB_NOOP(1);
*/

QRY
LLWEAPONEX_BlockHealing_QRY_BlockStatus((CHARACTERGUID)_Char, "HEAL")
THEN
DB_NOOP(1);

QRY
LLWEAPONEX_BlockHealing_QRY_BlockStatus((CHARACTERGUID)_Char, (STRING)_Status)
AND
_Status != "LIFESTEAL"
AND
QRY_IsHealingStatus(_Status)
THEN
DB_NOOP(1);

// Skip making already invulnerable characters invulnerable
QRY
LLWEAPONEX_BlockHealing_QRY_OriginallyInvulnerable((CHARACTERGUID)_Char)
AND
DB_ObjectStoryInvulnerable((GUIDSTRING)_Char)
AND
NOT DB_LLWEAPONEX_BlockingHealingStatus((CHARACTERGUID)_Char, _)
THEN
DB_NOOP(1);

//Play only once per block
PROC
LLWEAPONEX_BlockHealing_PlayEffect((CHARACTERGUID)_Char)
AND
NOT DB_LLWEAPONEX_BlockingHealingStatus(_Char, _)
THEN
CharacterStatusText(_Char, "LLWEAPONEX_StatusText_BlockedHealing");
PlayEffect(_Char, "LLWEAPONEX_FX_Status_BlockHealing_Hit_01", "Dummy_FrontFX");
//END_REGION

//REGION WAR_CHARGE_DAMAGE
IF
CharacterStatusApplied(_Char, "LLWEAPONEX_WARCHARGE_BONUS", _Source)
THEN
ApplyStatus(_Char, "LLWEAPONEX_WARCHARGE_DAMAGEBOOST", 12.0, 0, _Source);

IF
AttackedByObject(_Defender, _, (CHARACTERGUID)_Char, _DamageType, "")
AND
HasActiveStatus(_Char, "LLWEAPONEX_WARCHARGE_DAMAGEBOOST", 1)
THEN
RemoveStatus(_Char, "LLWEAPONEX_WARCHARGE_DAMAGEBOOST");

IF
AttackedByObject(_Defender, _, (CHARACTERGUID)_Char, _DamageType, "Attack")
AND
HasActiveStatus(_Char, "LLWEAPONEX_WARCHARGE_DAMAGEBOOST", 1)
THEN
RemoveStatus(_Char, "LLWEAPONEX_WARCHARGE_DAMAGEBOOST");
//END_REGION

//REGION INTERRUPT
IF
CharacterStatusApplied(_Char, "LLWEAPONEX_INTERRUPT", _Source)
THEN
ApplyStatus(_Char, "MUTED", 0.0, 1, _Source);
ApplyStatus(_Char, "DISARMED", 0.0, 1, _Source);
//END_REGION

//REGION DIZZY
IF
CharacterStatusApplied(_Char, "LLWEAPONEX_DIZZY", _)
THEN
ObjectSetFlag(_Char, "PlayAnim_Loop_stilldrunk", 0);

IF
CharacterStatusRemoved(_Char, "LLWEAPONEX_DIZZY", _)
THEN
CharacterSetAnimationOverride(_Char, "");
//END_REGION

//REGION REST
IF
CharacterStatusApplied(_Char, "STORY_PartyRest", _Source)
THEN
NRD_ModCall("WeaponExpansion", "OnRest", (STRING)_Char, (STRING)_Source);
//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "LLWEAPONEX_00_PostCC"
